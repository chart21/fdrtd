openapi: 3.0.0
info:
  contact:
    email: support@fdrtd.com
    name: fdrtd support
    url: https://www.fdrtd.com
  description: https://github.com/fdrtd
  license:
    name: MIT License
    url: https://github.com/fdrtd/api/blob/main/LICENSE.txt
  title: fdrtd API
  version: 0.2.0
externalDocs:
  description: technical documentation
  url: https://www.fdrtd.com/docs
servers:
- url: /
paths:
  /:
    get:
      description: list all installed microservices and their properties.
      operationId: list_microservices
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties: true
                  properties:
                    identifiers:
                      additionalProperties: true
                      type: object
                  required:
                  - identifiers
                  type: object
                type: array
          description: a list of microservices
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: list microservices
      x-openapi-router-controller: fdrtd.webserver.controllers.default_controller
    post:
      description: invoke some member function of a microservice and supply arguments
        for its execution. a successful function call will return either * nothing
        (HTTP 204) * some final result (HTTP 200) * an endpoint of another microservice
        (HTTP 202) * an endpoint of another microservice, and a callback handle to
        additional server-side arguments, to be passed on to that microservice (HTTP
        201).
      operationId: call_microservice
      requestBody:
        $ref: '#/components/requestBodies/CallMicroservice'
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
          description: general response, a dictionary of key-value pairs
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: a handle to a server-side microservice, and a handle to additional
            arguments stored server-side, to be looked up and passed in function calls
            to the microservice
        "202":
          content:
            application/json:
              schema:
                format: uuid
                type: string
          description: a handle to a server-side microservice
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Method Not Allowed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Gateway Timeout
      summary: call microservice
      x-openapi-router-controller: fdrtd.webserver.controllers.default_controller
    put:
      description: given some partial identifiers, find a matching microservice, and
        return a handle. for a wildcard search, the request body may hold an incomplete
        dictionary of identifiers. if there is a match, the response will be a server-side
        handle to the microservice. note that these handles are static, are safe to
        store client-side, and should be reused.
      operationId: select_microservice
      requestBody:
        $ref: '#/components/requestBodies/SelectMicroservice'
      responses:
        "202":
          content:
            application/json:
              schema:
                format: uuid
                type: string
          description: a handle to a server-side microservice
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Implemented
      summary: select microservice
      x-openapi-router-controller: fdrtd.webserver.controllers.default_controller
components:
  requestBodies:
    SelectMicroservice:
      content:
        application/json:
          schema:
            additionalProperties: true
            type: object
      description: properties of the desired microservice, as a dictionary of key-value
        pairs. typical keys might include 'namespace' (of the vendor), 'microservice'
        (obviously), 'version' (at the moment, the search returns only identical matches),
        and any combination of other properties as specified by the microservice provider.
      required: true
    CallMicroservice:
      content:
        application/json:
          schema:
            properties:
              handle:
                format: uuid
                type: string
              function:
                type: string
              parameters:
                additionalProperties: true
                type: object
              callback:
                oneOf:
                - format: uuid
                  type: string
                - additionalProperties: true
                  type: object
            required:
            - function
            - handle
            - parameters
            type: object
      description: <handle> is a server-side handle to the microservice (found by
        select_microservice). <function> is the name of the member function of the
        microservice to be called. <parameters> is a dictionary of key-value pairs
        which are provided to the function as named arguments. <callback> is an optional
        handle to additional arguments stored server-side. if it is present, the server
        will look up these arguments and provide them to the function as additional
        named arguments.
      required: true
  responses:
    ResponseMicroservices:
      content:
        application/json:
          schema:
            items:
              additionalProperties: true
              properties:
                identifiers:
                  additionalProperties: true
                  type: object
              required:
              - identifiers
              type: object
            type: array
      description: a list of microservices
    ResponseDictionary:
      content:
        application/json:
          schema:
            additionalProperties: true
            type: object
      description: general response, a dictionary of key-value pairs
    ResponseCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_201'
      description: a handle to a server-side microservice, and a handle to additional
        arguments stored server-side, to be looked up and passed in function calls
        to the microservice
    ResponseHandle:
      content:
        application/json:
          schema:
            format: uuid
            type: string
      description: a handle to a server-side microservice
    ResponseNoContent:
      description: No Content
    ErrorBadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    ErrorUnauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    ErrorForbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    ErrorNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    ErrorMethodNotAllowed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Method Not Allowed
    ErrorInternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error
    ErrorNotImplemented:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Implemented
    ErrorBadGateway:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Gateway
    ErrorServiceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Service Unavailable
    ErrorGatewayTimeout:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Gateway Timeout
  schemas:
    Error:
      properties:
        code:
          title: code
          type: integer
        message:
          title: message
          type: string
        stacktrace:
          title: stacktrace
          type: string
      required:
      - code
      - message
      title: Error
      type: object
    inline_response_201:
      properties:
        handle:
          format: uuid
          title: handle
          type: string
        callback:
          oneOf:
          - format: uuid
            type: string
          - additionalProperties: true
            type: object
          title: callback
      required:
      - callback
      - handle
      title: inline_response_201
      type: object
